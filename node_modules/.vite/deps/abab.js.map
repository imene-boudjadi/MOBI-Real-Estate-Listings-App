{
  "version": 3,
  "sources": ["../../abab/lib/atob.js", "../../abab/lib/btoa.js", "../../abab/index.js"],
  "sourcesContent": ["\"use strict\";\n\n/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(data) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  // Web IDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to using a template literal.\n  data = `${data}`;\n  // \"Remove all ASCII whitespace from data.\"\n  data = data.replace(/[ \\t\\n\\f\\r]/g, \"\");\n  // \"If data's length divides by 4 leaving no remainder, then: if data ends\n  // with one or two U+003D (=) code points, then remove them from data.\"\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n  // \"If data's length divides by 4 leaving a remainder of 1, then return\n  // failure.\"\n  //\n  // \"If data contains a code point that is not one of\n  //\n  // U+002B (+)\n  // U+002F (/)\n  // ASCII alphanumeric\n  //\n  // then return failure.\"\n  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n    return null;\n  }\n  // \"Let output be an empty byte sequence.\"\n  let output = \"\";\n  // \"Let buffer be an empty buffer that can have bits appended to it.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  let buffer = 0;\n  let accumulatedBits = 0;\n  // \"Let position be a position variable for data, initially pointing at the\n  // start of data.\"\n  //\n  // \"While position does not point past the end of data:\"\n  for (let i = 0; i < data.length; i++) {\n    // \"Find the code point pointed to by position in the second column of\n    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n    // the first cell of the same row.\n    //\n    // \"Append to buffer the six bits corresponding to n, most significant bit\n    // first.\"\n    //\n    // atobLookup() implements the table from RFC 4648.\n    buffer <<= 6;\n    buffer |= atobLookup(data[i]);\n    accumulatedBits += 6;\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append three bytes with values equal to those\n    // numbers to output, in the same order, and then empty buffer.\"\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by 1.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n  // 12 bits, then discard the last four and interpret the remaining eight as\n  // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n  // the one or two bytes with values equal to those one or two numbers to\n  // output, in the same order.\"\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\n\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction atobLookup(chr) {\n  const index = keystr.indexOf(chr);\n  // Throw exception if character is not in the lookup string; should not be hit in tests\n  return index < 0 ? undefined : index;\n}\n\nmodule.exports = atob;\n", "\"use strict\";\n\n/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */\nfunction btoa(s) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  let i;\n  // String conversion as required by Web IDL.\n  s = `${s}`;\n  // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n  // data contains any character whose code point is greater than U+00FF.\"\n  for (i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 255) {\n      return null;\n    }\n  }\n  let out = \"\";\n  for (i = 0; i < s.length; i += 3) {\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = s.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n    if (s.length > i + 1) {\n      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (s.length > i + 2) {\n      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += btoaLookup(groupsOfSix[j]);\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction btoaLookup(index) {\n  if (index >= 0 && index < 64) {\n    return keystr[index];\n  }\n\n  // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n  return undefined;\n}\n\nmodule.exports = btoa;\n", "\"use strict\";\n\nconst atob = require(\"./lib/atob\");\nconst btoa = require(\"./lib/btoa\");\n\nmodule.exports = {\n  atob,\n  btoa\n};\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAMA,aAAS,KAAK,MAAM;AAClB,UAAI,UAAU,WAAW,GAAG;AAC1B,cAAM,IAAI,UAAU,0CAA0C;AAAA,MAChE;AAIA,aAAO,GAAG;AAEV,aAAO,KAAK,QAAQ,gBAAgB,EAAE;AAGtC,UAAI,KAAK,SAAS,MAAM,GAAG;AACzB,eAAO,KAAK,QAAQ,QAAQ,EAAE;AAAA,MAChC;AAWA,UAAI,KAAK,SAAS,MAAM,KAAK,iBAAiB,KAAK,IAAI,GAAG;AACxD,eAAO;AAAA,MACT;AAEA,UAAI,SAAS;AAKb,UAAI,SAAS;AACb,UAAI,kBAAkB;AAKtB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AASpC,mBAAW;AACX,kBAAU,WAAW,KAAK,CAAC,CAAC;AAC5B,2BAAmB;AAInB,YAAI,oBAAoB,IAAI;AAC1B,oBAAU,OAAO,cAAc,SAAS,aAAa,EAAE;AACvD,oBAAU,OAAO,cAAc,SAAS,UAAW,CAAC;AACpD,oBAAU,OAAO,aAAa,SAAS,GAAI;AAC3C,mBAAS,kBAAkB;AAAA,QAC7B;AAAA,MAEF;AAOA,UAAI,oBAAoB,IAAI;AAC1B,mBAAW;AACX,kBAAU,OAAO,aAAa,MAAM;AAAA,MACtC,WAAW,oBAAoB,IAAI;AACjC,mBAAW;AACX,kBAAU,OAAO,cAAc,SAAS,UAAW,CAAC;AACpD,kBAAU,OAAO,aAAa,SAAS,GAAI;AAAA,MAC7C;AAEA,aAAO;AAAA,IACT;AAMA,QAAM,SACJ;AAEF,aAAS,WAAW,KAAK;AACvB,YAAM,QAAQ,OAAO,QAAQ,GAAG;AAEhC,aAAO,QAAQ,IAAI,SAAY;AAAA,IACjC;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACpGjB;AAAA;AAAA;AAMA,aAAS,KAAK,GAAG;AACf,UAAI,UAAU,WAAW,GAAG;AAC1B,cAAM,IAAI,UAAU,0CAA0C;AAAA,MAChE;AAEA,UAAI;AAEJ,UAAI,GAAG;AAGP,WAAK,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC7B,YAAI,EAAE,WAAW,CAAC,IAAI,KAAK;AACzB,iBAAO;AAAA,QACT;AAAA,MACF;AACA,UAAI,MAAM;AACV,WAAK,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,GAAG;AAChC,cAAM,cAAc,CAAC,QAAW,QAAW,QAAW,MAAS;AAC/D,oBAAY,CAAC,IAAI,EAAE,WAAW,CAAC,KAAK;AACpC,oBAAY,CAAC,KAAK,EAAE,WAAW,CAAC,IAAI,MAAS;AAC7C,YAAI,EAAE,SAAS,IAAI,GAAG;AACpB,sBAAY,CAAC,KAAK,EAAE,WAAW,IAAI,CAAC,KAAK;AACzC,sBAAY,CAAC,KAAK,EAAE,WAAW,IAAI,CAAC,IAAI,OAAS;AAAA,QACnD;AACA,YAAI,EAAE,SAAS,IAAI,GAAG;AACpB,sBAAY,CAAC,KAAK,EAAE,WAAW,IAAI,CAAC,KAAK;AACzC,sBAAY,CAAC,IAAI,EAAE,WAAW,IAAI,CAAC,IAAI;AAAA,QACzC;AACA,iBAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,cAAI,OAAO,YAAY,CAAC,MAAM,aAAa;AACzC,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO,WAAW,YAAY,CAAC,CAAC;AAAA,UAClC;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAMA,QAAM,SACJ;AAEF,aAAS,WAAW,OAAO;AACzB,UAAI,SAAS,KAAK,QAAQ,IAAI;AAC5B,eAAO,OAAO,KAAK;AAAA,MACrB;AAGA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC7DjB;AAAA;AAEA,QAAM,OAAO;AACb,QAAM,OAAO;AAEb,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;",
  "names": []
}
